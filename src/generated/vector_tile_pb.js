// source: vector_tile.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.vector_tile.Tile', null, global);
goog.exportSymbol('proto.vector_tile.Tile.Feature', null, global);
goog.exportSymbol('proto.vector_tile.Tile.GeomType', null, global);
goog.exportSymbol('proto.vector_tile.Tile.Layer', null, global);
goog.exportSymbol('proto.vector_tile.Tile.Value', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vector_tile.Tile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 4, proto.vector_tile.Tile.repeatedFields_, null);
};
goog.inherits(proto.vector_tile.Tile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vector_tile.Tile.displayName = 'proto.vector_tile.Tile';
}

/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldInfo>}
 */
proto.vector_tile.Tile.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldBinaryInfo>}
 */
proto.vector_tile.Tile.extensionsBinary = {};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vector_tile.Tile.Value = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 8, null, null);
};
goog.inherits(proto.vector_tile.Tile.Value, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vector_tile.Tile.Value.displayName = 'proto.vector_tile.Tile.Value';
}

/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldInfo>}
 */
proto.vector_tile.Tile.Value.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldBinaryInfo>}
 */
proto.vector_tile.Tile.Value.extensionsBinary = {};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vector_tile.Tile.Feature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vector_tile.Tile.Feature.repeatedFields_, null);
};
goog.inherits(proto.vector_tile.Tile.Feature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vector_tile.Tile.Feature.displayName = 'proto.vector_tile.Tile.Feature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vector_tile.Tile.Layer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 16, proto.vector_tile.Tile.Layer.repeatedFields_, null);
};
goog.inherits(proto.vector_tile.Tile.Layer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vector_tile.Tile.Layer.displayName = 'proto.vector_tile.Tile.Layer';
}

/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldInfo>}
 */
proto.vector_tile.Tile.Layer.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldBinaryInfo>}
 */
proto.vector_tile.Tile.Layer.extensionsBinary = {};


/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vector_tile.Tile.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vector_tile.Tile.prototype.toObject = function(opt_includeInstance) {
  return proto.vector_tile.Tile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vector_tile.Tile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vector_tile.Tile.toObject = function(includeInstance, msg) {
  var f, obj = {
    layersList: jspb.Message.toObjectList(msg.getLayersList(),
    proto.vector_tile.Tile.Layer.toObject, includeInstance)
  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.vector_tile.Tile.extensions, proto.vector_tile.Tile.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vector_tile.Tile}
 */
proto.vector_tile.Tile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vector_tile.Tile;
  return proto.vector_tile.Tile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vector_tile.Tile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vector_tile.Tile}
 */
proto.vector_tile.Tile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = new proto.vector_tile.Tile.Layer;
      reader.readMessage(value,proto.vector_tile.Tile.Layer.deserializeBinaryFromReader);
      msg.addLayers(value);
      break;
    default:
      jspb.Message.readBinaryExtension(msg, reader,
        proto.vector_tile.Tile.extensionsBinary,
        proto.vector_tile.Tile.prototype.getExtension,
        proto.vector_tile.Tile.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vector_tile.Tile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vector_tile.Tile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vector_tile.Tile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vector_tile.Tile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLayersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.vector_tile.Tile.Layer.serializeBinaryToWriter
    );
  }
  jspb.Message.serializeBinaryExtensions(message, writer,
    proto.vector_tile.Tile.extensionsBinary, proto.vector_tile.Tile.prototype.getExtension);
};


/**
 * @enum {number}
 */
proto.vector_tile.Tile.GeomType = {
  UNKNOWN: 0,
  POINT: 1,
  LINESTRING: 2,
  POLYGON: 3
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vector_tile.Tile.Value.prototype.toObject = function(opt_includeInstance) {
  return proto.vector_tile.Tile.Value.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vector_tile.Tile.Value} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vector_tile.Tile.Value.toObject = function(includeInstance, msg) {
  var f, obj = {
    stringValue: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    floatValue: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    doubleValue: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    intValue: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    uintValue: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    sintValue: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    boolValue: (f = jspb.Message.getBooleanField(msg, 7)) == null ? undefined : f
  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.vector_tile.Tile.Value.extensions, proto.vector_tile.Tile.Value.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vector_tile.Tile.Value}
 */
proto.vector_tile.Tile.Value.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vector_tile.Tile.Value;
  return proto.vector_tile.Tile.Value.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vector_tile.Tile.Value} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vector_tile.Tile.Value}
 */
proto.vector_tile.Tile.Value.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringValue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFloatValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDoubleValue(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIntValue(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUintValue(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setSintValue(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolValue(value);
      break;
    default:
      jspb.Message.readBinaryExtension(msg, reader,
        proto.vector_tile.Tile.Value.extensionsBinary,
        proto.vector_tile.Tile.Value.prototype.getExtension,
        proto.vector_tile.Tile.Value.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vector_tile.Tile.Value.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vector_tile.Tile.Value.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vector_tile.Tile.Value} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vector_tile.Tile.Value.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeSint64(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
  jspb.Message.serializeBinaryExtensions(message, writer,
    proto.vector_tile.Tile.Value.extensionsBinary, proto.vector_tile.Tile.Value.prototype.getExtension);
};


/**
 * optional string string_value = 1;
 * @return {string}
 */
proto.vector_tile.Tile.Value.prototype.getStringValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vector_tile.Tile.Value} returns this
 */
proto.vector_tile.Tile.Value.prototype.setStringValue = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vector_tile.Tile.Value} returns this
 */
proto.vector_tile.Tile.Value.prototype.clearStringValue = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vector_tile.Tile.Value.prototype.hasStringValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float float_value = 2;
 * @return {number}
 */
proto.vector_tile.Tile.Value.prototype.getFloatValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vector_tile.Tile.Value} returns this
 */
proto.vector_tile.Tile.Value.prototype.setFloatValue = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vector_tile.Tile.Value} returns this
 */
proto.vector_tile.Tile.Value.prototype.clearFloatValue = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vector_tile.Tile.Value.prototype.hasFloatValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double double_value = 3;
 * @return {number}
 */
proto.vector_tile.Tile.Value.prototype.getDoubleValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vector_tile.Tile.Value} returns this
 */
proto.vector_tile.Tile.Value.prototype.setDoubleValue = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vector_tile.Tile.Value} returns this
 */
proto.vector_tile.Tile.Value.prototype.clearDoubleValue = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vector_tile.Tile.Value.prototype.hasDoubleValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 int_value = 4;
 * @return {number}
 */
proto.vector_tile.Tile.Value.prototype.getIntValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.vector_tile.Tile.Value} returns this
 */
proto.vector_tile.Tile.Value.prototype.setIntValue = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vector_tile.Tile.Value} returns this
 */
proto.vector_tile.Tile.Value.prototype.clearIntValue = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vector_tile.Tile.Value.prototype.hasIntValue = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint64 uint_value = 5;
 * @return {number}
 */
proto.vector_tile.Tile.Value.prototype.getUintValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.vector_tile.Tile.Value} returns this
 */
proto.vector_tile.Tile.Value.prototype.setUintValue = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vector_tile.Tile.Value} returns this
 */
proto.vector_tile.Tile.Value.prototype.clearUintValue = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vector_tile.Tile.Value.prototype.hasUintValue = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional sint64 sint_value = 6;
 * @return {number}
 */
proto.vector_tile.Tile.Value.prototype.getSintValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.vector_tile.Tile.Value} returns this
 */
proto.vector_tile.Tile.Value.prototype.setSintValue = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vector_tile.Tile.Value} returns this
 */
proto.vector_tile.Tile.Value.prototype.clearSintValue = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vector_tile.Tile.Value.prototype.hasSintValue = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool bool_value = 7;
 * @return {boolean}
 */
proto.vector_tile.Tile.Value.prototype.getBoolValue = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.vector_tile.Tile.Value} returns this
 */
proto.vector_tile.Tile.Value.prototype.setBoolValue = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vector_tile.Tile.Value} returns this
 */
proto.vector_tile.Tile.Value.prototype.clearBoolValue = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vector_tile.Tile.Value.prototype.hasBoolValue = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vector_tile.Tile.Feature.repeatedFields_ = [2,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vector_tile.Tile.Feature.prototype.toObject = function(opt_includeInstance) {
  return proto.vector_tile.Tile.Feature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vector_tile.Tile.Feature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vector_tile.Tile.Feature.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tagsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    geometryList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vector_tile.Tile.Feature}
 */
proto.vector_tile.Tile.Feature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vector_tile.Tile.Feature;
  return proto.vector_tile.Tile.Feature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vector_tile.Tile.Feature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vector_tile.Tile.Feature}
 */
proto.vector_tile.Tile.Feature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addTags(values[i]);
      }
      break;
    case 3:
      var value = /** @type {!proto.vector_tile.Tile.GeomType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addGeometry(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vector_tile.Tile.Feature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vector_tile.Tile.Feature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vector_tile.Tile.Feature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vector_tile.Tile.Feature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    );
  }
  f = /** @type {!proto.vector_tile.Tile.GeomType} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getGeometryList();
  if (f.length > 0) {
    writer.writePackedUint32(
      4,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.vector_tile.Tile.Feature.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.vector_tile.Tile.Feature} returns this
 */
proto.vector_tile.Tile.Feature.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vector_tile.Tile.Feature} returns this
 */
proto.vector_tile.Tile.Feature.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vector_tile.Tile.Feature.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated uint32 tags = 2;
 * @return {!Array<number>}
 */
proto.vector_tile.Tile.Feature.prototype.getTagsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.vector_tile.Tile.Feature} returns this
 */
proto.vector_tile.Tile.Feature.prototype.setTagsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.vector_tile.Tile.Feature} returns this
 */
proto.vector_tile.Tile.Feature.prototype.addTags = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vector_tile.Tile.Feature} returns this
 */
proto.vector_tile.Tile.Feature.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};


/**
 * optional GeomType type = 3;
 * @return {!proto.vector_tile.Tile.GeomType}
 */
proto.vector_tile.Tile.Feature.prototype.getType = function() {
  return /** @type {!proto.vector_tile.Tile.GeomType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.vector_tile.Tile.GeomType} value
 * @return {!proto.vector_tile.Tile.Feature} returns this
 */
proto.vector_tile.Tile.Feature.prototype.setType = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vector_tile.Tile.Feature} returns this
 */
proto.vector_tile.Tile.Feature.prototype.clearType = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vector_tile.Tile.Feature.prototype.hasType = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated uint32 geometry = 4;
 * @return {!Array<number>}
 */
proto.vector_tile.Tile.Feature.prototype.getGeometryList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.vector_tile.Tile.Feature} returns this
 */
proto.vector_tile.Tile.Feature.prototype.setGeometryList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.vector_tile.Tile.Feature} returns this
 */
proto.vector_tile.Tile.Feature.prototype.addGeometry = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vector_tile.Tile.Feature} returns this
 */
proto.vector_tile.Tile.Feature.prototype.clearGeometryList = function() {
  return this.setGeometryList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vector_tile.Tile.Layer.repeatedFields_ = [2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vector_tile.Tile.Layer.prototype.toObject = function(opt_includeInstance) {
  return proto.vector_tile.Tile.Layer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vector_tile.Tile.Layer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vector_tile.Tile.Layer.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 15, 1),
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    featuresList: jspb.Message.toObjectList(msg.getFeaturesList(),
    proto.vector_tile.Tile.Feature.toObject, includeInstance),
    keysList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.vector_tile.Tile.Value.toObject, includeInstance),
    extent: jspb.Message.getFieldWithDefault(msg, 5, 4096)
  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.vector_tile.Tile.Layer.extensions, proto.vector_tile.Tile.Layer.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vector_tile.Tile.Layer}
 */
proto.vector_tile.Tile.Layer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vector_tile.Tile.Layer;
  return proto.vector_tile.Tile.Layer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vector_tile.Tile.Layer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vector_tile.Tile.Layer}
 */
proto.vector_tile.Tile.Layer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 15:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVersion(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.vector_tile.Tile.Feature;
      reader.readMessage(value,proto.vector_tile.Tile.Feature.deserializeBinaryFromReader);
      msg.addFeatures(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addKeys(value);
      break;
    case 4:
      var value = new proto.vector_tile.Tile.Value;
      reader.readMessage(value,proto.vector_tile.Tile.Value.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExtent(value);
      break;
    default:
      jspb.Message.readBinaryExtension(msg, reader,
        proto.vector_tile.Tile.Layer.extensionsBinary,
        proto.vector_tile.Tile.Layer.prototype.getExtension,
        proto.vector_tile.Tile.Layer.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vector_tile.Tile.Layer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vector_tile.Tile.Layer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vector_tile.Tile.Layer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vector_tile.Tile.Layer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeUint32(
      15,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFeaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.vector_tile.Tile.Feature.serializeBinaryToWriter
    );
  }
  f = message.getKeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.vector_tile.Tile.Value.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  jspb.Message.serializeBinaryExtensions(message, writer,
    proto.vector_tile.Tile.Layer.extensionsBinary, proto.vector_tile.Tile.Layer.prototype.getExtension);
};


/**
 * required uint32 version = 15;
 * @return {number}
 */
proto.vector_tile.Tile.Layer.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 1));
};


/**
 * @param {number} value
 * @return {!proto.vector_tile.Tile.Layer} returns this
 */
proto.vector_tile.Tile.Layer.prototype.setVersion = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vector_tile.Tile.Layer} returns this
 */
proto.vector_tile.Tile.Layer.prototype.clearVersion = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vector_tile.Tile.Layer.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * required string name = 1;
 * @return {string}
 */
proto.vector_tile.Tile.Layer.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vector_tile.Tile.Layer} returns this
 */
proto.vector_tile.Tile.Layer.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vector_tile.Tile.Layer} returns this
 */
proto.vector_tile.Tile.Layer.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vector_tile.Tile.Layer.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Feature features = 2;
 * @return {!Array<!proto.vector_tile.Tile.Feature>}
 */
proto.vector_tile.Tile.Layer.prototype.getFeaturesList = function() {
  return /** @type{!Array<!proto.vector_tile.Tile.Feature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vector_tile.Tile.Feature, 2));
};


/**
 * @param {!Array<!proto.vector_tile.Tile.Feature>} value
 * @return {!proto.vector_tile.Tile.Layer} returns this
*/
proto.vector_tile.Tile.Layer.prototype.setFeaturesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.vector_tile.Tile.Feature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vector_tile.Tile.Feature}
 */
proto.vector_tile.Tile.Layer.prototype.addFeatures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.vector_tile.Tile.Feature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vector_tile.Tile.Layer} returns this
 */
proto.vector_tile.Tile.Layer.prototype.clearFeaturesList = function() {
  return this.setFeaturesList([]);
};


/**
 * repeated string keys = 3;
 * @return {!Array<string>}
 */
proto.vector_tile.Tile.Layer.prototype.getKeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.vector_tile.Tile.Layer} returns this
 */
proto.vector_tile.Tile.Layer.prototype.setKeysList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.vector_tile.Tile.Layer} returns this
 */
proto.vector_tile.Tile.Layer.prototype.addKeys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vector_tile.Tile.Layer} returns this
 */
proto.vector_tile.Tile.Layer.prototype.clearKeysList = function() {
  return this.setKeysList([]);
};


/**
 * repeated Value values = 4;
 * @return {!Array<!proto.vector_tile.Tile.Value>}
 */
proto.vector_tile.Tile.Layer.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.vector_tile.Tile.Value>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vector_tile.Tile.Value, 4));
};


/**
 * @param {!Array<!proto.vector_tile.Tile.Value>} value
 * @return {!proto.vector_tile.Tile.Layer} returns this
*/
proto.vector_tile.Tile.Layer.prototype.setValuesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.vector_tile.Tile.Value=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vector_tile.Tile.Value}
 */
proto.vector_tile.Tile.Layer.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.vector_tile.Tile.Value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vector_tile.Tile.Layer} returns this
 */
proto.vector_tile.Tile.Layer.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};


/**
 * optional uint32 extent = 5;
 * @return {number}
 */
proto.vector_tile.Tile.Layer.prototype.getExtent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 4096));
};


/**
 * @param {number} value
 * @return {!proto.vector_tile.Tile.Layer} returns this
 */
proto.vector_tile.Tile.Layer.prototype.setExtent = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vector_tile.Tile.Layer} returns this
 */
proto.vector_tile.Tile.Layer.prototype.clearExtent = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vector_tile.Tile.Layer.prototype.hasExtent = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated Layer layers = 3;
 * @return {!Array<!proto.vector_tile.Tile.Layer>}
 */
proto.vector_tile.Tile.prototype.getLayersList = function() {
  return /** @type{!Array<!proto.vector_tile.Tile.Layer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vector_tile.Tile.Layer, 3));
};


/**
 * @param {!Array<!proto.vector_tile.Tile.Layer>} value
 * @return {!proto.vector_tile.Tile} returns this
*/
proto.vector_tile.Tile.prototype.setLayersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.vector_tile.Tile.Layer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vector_tile.Tile.Layer}
 */
proto.vector_tile.Tile.prototype.addLayers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.vector_tile.Tile.Layer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vector_tile.Tile} returns this
 */
proto.vector_tile.Tile.prototype.clearLayersList = function() {
  return this.setLayersList([]);
};


goog.object.extend(exports, proto.vector_tile);
